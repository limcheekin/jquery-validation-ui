h3. Supports All Standard Grails Constraints

As you can see in the @StringConstraintsMap@, all standard Grails constraints are supported by the plugin.

h3. Display Validation Messages on Right or Top

Display on right:

!messages-right.jpg!

Display on top:

!messages-top.jpg!

*Note:* To see the message style like the screen above, you need to edit line 109 of @web-app/css/main.css@ as per following code:

{code}
div.errors {
    margin: 10px 0 5px 0;
    padding: 5px 0 5px 0;
}
{code}

Otherwise, you will see the message style like the screen below:

!messages-top-orig.jpg!

h3. Extensibility

Together with the [custom constraints|http://github.com/geofflane/grails-constraints] plugin, the plugin is fully extensible with your own custom validation logic.

The plugin comes with 2 custom constraints, phone and phoneUS (International and US phone number validation) which are enabled by the following configuration:
{code}
StringConstraintsMap = [
    blank:'required', // inverse: blank=false, required=true
    creditCard:'creditcard',
    ...,
    phone:'phone',
    phoneUS:'phoneUS',
]

CustomConstraintsMap = [
    phone:'true',
    phoneUS:'true'
]
{code}

If you implement new custom constraints (both server-side and Javascript), you can enable it by adding the constraints to the @CustomConstraintsMap@, for example:
{code}
StringConstraintsMap = [
    blank:'required', // inverse: blank=false, required=true
    creditCard:'creditcard',
    ...,
    phone:'phone',
    phoneUS:'phoneUS',
    yourCustomConstraint:'jqueryValidationPluginCustomConstraint'
]

CustomConstraintsMap = [
    phone:'true',
    phoneUS:'true',
    yourCustomConstraint:'jqueryValidationPluginCustomConstraintParamGeneratorJavascript'
]
{code}
The @'jqueryValidationPluginCustomConstraint'@ is the name of the custom jquery validation plugin method to use for client-side validation. 
The @'jqueryValidationPluginCustomConstraintParamGeneratorJavascript'@ is javascript that will be used to supply the parameter to
the jqueryValidationPluginCustomConstraint.
These values will be used by the @<jqvalui:renderValidationScript />@ tag. Please refer to the
source code of the server-side implementation of phone constraint 
[here|http://github.com/limcheekin/jquery-validation-ui/blob/master/test/unit/org/grails/jquery/validation/ui/PhoneConstraintTests.groovy] 
and the client-side implementation 
[here|http://github.com/limcheekin/jquery-validation-ui/blob/master/web-app/js/jquery-validation-ui/grails-validation-methods.js] 
(scroll down to bottom, the last method) to see how it was implemented.

h3. Internationalization Support
All client-side validation messages retrieve from messages.properties. So, both client-side and server-side validation using the same message bundle. 
Prior to version 1.4.5, the plugin retrieved the validation message by trying the following codes in this order:

{code}
classFullName.property.constraint
classFullName.property.constraint.error
classFullName.property.constraint.invalid
className.property.constraint
className.property.constraint.error
className.property.constraint.invalid
{code}

As of version 1.4.5, the plugin now searches for an error message using the same error codes used by the grails server-side validation process. It also
respects the @defaultMessageCode@, @defaultMessage@, and @failureCode@ settings on custom constraints when searching for an error message.  This means that
it should now be much easier to know which message codes you should use in your message bundles since the server-side and client-side now use the same
codes and search order. The one exception to this is if a grails constraint returns different message codes depending on the kind
of validation failure.  For example, the grails size constraint returns @className.propertyName.size.toosmall@ or @className.propertyName.size.toobig@
depending on whether the field value was too large or too small to satisfy the constraint. Since the plugin is simply generating the validation code,
but doesn't yet know what the value will be, it has no way of knowing which validation message it should insert into the javascript. It may be possible
to generate javascript that would handle both cases on the client in the future. However, for now the workaround is to use the message code
@className.propertyName.size.error@ (or other standard grails message code for the size constraint that doesn't have 'toobig' or 'toosmall' in it) with a
message that will work for when the value is too large or too small. Another option for the size constraint is to use the @minSize@ and @maxSize@ constraints
instead of the @size@ constraint.

Most pre-1.4.5 applications will be mostly compatible with the new behavior as most of the error codes used by the old behavior are also used by the standard
grails validation process. The one difference is that in some cases the error codes with the suffix of '.invalid' or the error codes with no '.error' or
'.invalid' suffix that were used by the plugin prior to 1.4.5 are not used by the standard grails validation process. If you have these message codes in your
message bundles, you will need to update them to use a standard grails message code instead. For example, the message code @className.property.blank.invalid@
is not a standard grails message code, but it was searched for by this plugin prior to version 1.4.5.  You would need to change your message bundles to use a
standard grails message code instead. For example, the codes @className.property.blank.error@ or @className.property.blank@ are standard grails message codes for
the blank constraint and would be valid replacements for the @className.property.blank.invalid message@ code that worked prior to grails 1.4.5. For backwards
compatibility, you can add the following line:

{code}
useLegacyMessageCodes=false
{code}

to the @jqueryValidationUi@ section of your @Config.groovy@ to use the pre-1.4.5 message codes. However, please be aware that the pre-1.4.5 behavior is
deprecated, so this option is only made available to allow users to upgrade the plugin and have time to convert their message codes to standard grails
codes. The useLegacyMessageCodes option will be removed in a future release.

If a message cannot be found from the message codes, the default message will be used.

h3. Type Validation Support
The plugin supports type validation for @Date@, @Long@, @Integer@, @Short@, @BigInteger@, @Float@, @Double@, and @BigDecimal@ and retrieves the corresponding 
validation message from @messages.properties@ file by using the following message codes:

{code}
typeMismatch.java.util.Date
typeMismatch.java.lang.Double
typeMismatch.java.lang.Integer
typeMismatch.java.lang.Long
typeMismatch.java.lang.Short
typeMismatch.java.math.BigDecimal
typeMismatch.java.math.BigInteger
{code}